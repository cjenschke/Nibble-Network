{{!-- views/dashboard.handlebars: --}}
{{> navbar }}

<div class="container-fluid mt-4">
    <div class="row">

        <!-- First (Left) Container -->
        <div class="col-md-4">
            <div class="floating-effect">
                <h2>My Cupboard</h2>
                <form id="addIngredientForm" class="form-inline mb-3">
                    <input type="text" id="newIngredient" class="form-control mr-2" placeholder="Add new ingredient" />
                    <button type="submit" class="btn btn-primary">Add</button>
                </form>
                <ul id="ingredientList" class="list-group">
                    <!-- Ingredients will be dynamically loaded here -->
                </ul>
            </div>
        </div>

        <!-- Middle (Invisible) Container -->
        <div class="col-md-4 d-flex justify-content-center align-items-end" style="height: 100%;">
            <!-- Button at the bottom -->
            <button id="searchRecipesButton" type="button" class="btn btn-primary mb-3" onclick="searchRecipes()">Search Recipes</button>
        </div>

        <!-- Third (Right) Container -->
        <div class="col-md-4">
            <div class="floating-effect">
                <h2>Favorite Recipes</h2>
                {{#each favoriteRecipes}}
                    <div class="recipe-item mb-2">
                        <a href="/recipe/{{this.id}}" class="text-decoration-none">{{this.title}}</a>
                        <span class="delete-icon" onclick="deleteRecipe({{this.id}})">🗑️</span>
                    </div>
                {{/each}}
            </div>
        </div>

    </div>
</div>

<script>
    // Existing JavaScript for delete functionality
    // ...

    // JavaScript for adding ingredients to local storage
    document.getElementById('addIngredientForm').addEventListener('submit', function(event) {
        event.preventDefault();
        const ingredient = document.getElementById('newIngredient').value;
        if (ingredient) {
            addIngredientToLocal(ingredient);
            document.getElementById('newIngredient').value = ''; // Clear the input field
            updateIngredientListDisplay();
        }
    });

    function addIngredientToLocal(ingredient) {
        let ingredients = JSON.parse(localStorage.getItem('ingredients')) || [];
        ingredients.push(ingredient);
        localStorage.setItem('ingredients', JSON.stringify(ingredients));
    }

    function updateIngredientListDisplay() {
        const ingredients = JSON.parse(localStorage.getItem('ingredients')) || [];
        const ingredientListElement = document.getElementById('ingredientList');
        ingredientListElement.innerHTML = '';
        ingredients.forEach(ingredient => {
            const li = document.createElement('li');
            li.textContent = ingredient;
            li.classList.add('list-group-item');
            ingredientListElement.appendChild(li);
        });
    }

    // Call this function to display ingredients when the page loads
    updateIngredientListDisplay();
</script>


